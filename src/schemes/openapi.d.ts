/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/auth/sign-in": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["AuthController_signIn"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/sign-up": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["AuthController_signUp"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/send-verification": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["AuthController_sendVerification"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/confirm-verification": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["AuthController_confirmVerification"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/refresh-token": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["AuthController_refreshNewToken"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/reset-password": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["AuthController_resetPassword"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user/update-status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["UserController_updateStatus"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        BaseResponse: {
            /**
             * @description HTTP status code
             * @example 200
             * @enum {number}
             */
            statusCode: 100 | 101 | 102 | 103 | 200 | 201 | 202 | 203 | 204 | 205 | 206 | 207 | 208 | 210 | 300 | 301 | 302 | 303 | 304 | 307 | 308 | 400 | 401 | 402 | 403 | 404 | 405 | 406 | 407 | 408 | 409 | 410 | 411 | 412 | 413 | 414 | 415 | 416 | 417 | 418 | 421 | 422 | 423 | 424 | 428 | 429 | 456 | 500 | 501 | 502 | 503 | 504 | 505 | 507 | 508;
            /**
             * @description Response message
             * @example OK
             */
            message: string;
            /** @description Response data (null if no data) */
            data?: Record<string, never> | null;
            /** @description Error information (null on success) */
            error?: Record<string, never>;
            /**
             * @description Error code (optional)
             * @enum {string}
             */
            errorCode?: "validation_failed" | "unauthenticated" | "unauthorized" | "http_error" | "unknown_error" | "token_expired" | "invalid_token" | "not_any_recipient" | "send_mail_failed" | "consumer_not_found" | "consumer_failed" | "process_failed" | "otp_already_exist" | "otp_spam" | "otp_expired" | "otp_incorrect" | "invalid_decode_token" | "invalid_token_issuer" | "VerificationNotFound" | "VerificationSessionExpired" | "AccountNotFound" | "ExistedEmail" | "ExistedPhoneNumber" | "InvalidEmailOrPassword" | "InvalidTokenSecret";
        };
        SignInResponse: {
            /**
             * @description User ID
             * @example 1
             */
            id: string;
            /**
             * @description User role
             * @example FAN
             * @enum {string}
             */
            role: "FAN" | "ADMIN" | "IDOL";
            /**
             * @description JWT access token
             * @example eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
             */
            accessToken: string;
            /**
             * @description JWT refresh token
             * @example eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
             */
            refreshToken: string;
        };
        VerificationCodeResponse: {
            /**
             * @description Wait time in seconds
             * @example 60
             */
            waitSeconds: number;
            /**
             * @description Expired at verification timestamp
             * @example 1740412406898
             */
            expireAt: number;
        };
        ConfirmVerificationResponse: {
            /**
             * @description User ID
             * @example 1
             */
            id: string;
            /**
             * @description User name
             * @example Leon
             */
            name?: string | null;
            /**
             * @description User email
             * @example example@gmail.com
             */
            email: string;
            /**
             * @description User role
             * @example FAN
             * @enum {string}
             */
            role: "FAN" | "ADMIN" | "IDOL";
        };
        SignInRequest: {
            /**
             * @description Your email
             * @example example@gmail.com
             */
            email: string;
            /**
             * @description Your password
             * @example Password@123456
             */
            password: string;
        };
        SignUpRequest: {
            /**
             * @description Your email
             * @example example@gmail.com
             */
            email: string;
            /**
             * @description Your password
             * @example Password@123456
             */
            password: string;
            /**
             * @description Your full name
             * @example John Doe
             */
            name: string;
            /**
             * @description Your phone number
             * @example +1234567890
             */
            phoneNumber: string;
        };
        SendVerificationRequest: {
            /**
             * @description Your email address
             * @example user@example.com
             */
            email: string;
            /**
             * @description Verification behavior
             * @example REGISTER_ACCOUNT
             * @enum {string}
             */
            verificationType: "FIND_EMAIL" | "RESET_PASSWORD" | "REGISTER_ACCOUNT" | "UPDATE_PROFILE";
        };
        ConfirmVerificationRequest: {
            /**
             * @description Your email address
             * @example example@gmail.com
             */
            email: string;
            /**
             * @description Your verification code
             * @example 0303
             */
            code: string;
            /**
             * @description Verification type
             * @example FIND_EMAIL
             * @enum {string}
             */
            verificationType: "FIND_EMAIL" | "RESET_PASSWORD" | "REGISTER_ACCOUNT" | "UPDATE_PROFILE";
        };
        RefreshTokenRequest: {
            /**
             * @description Your access token
             * @example eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjEsImlhdCI6MTY4ODUwMjM0NSwiZXhwIjoxNjg4NTg4NzQ1fQ.7mXhKfXlqH3p0nO2b8jv8XzF1Zz5Y9bX5tF8vZ6xQ
             */
            token: string;
            /**
             * @description Your refresh token
             * @example eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjEsImlhdCI6MTY4ODUwMjM0NSwiZXhwIjoxNjg4NTg4NzQ1fQ.7mXhKfXlqH3p0nO2b8jv8XzF1Zz5Y9bX5tF8vZ6xQ
             */
            refreshToken: string;
        };
        ResetPasswordRequest: {
            /**
             * @description Your new password
             * @example Password@123456
             */
            password: string;
            /**
             * @description Your email address
             * @example example@gmail.com
             */
            email: string;
        };
        UpdateStatusRequest: {
            /**
             * @description User ID
             * @example 123e4567
             */
            userId: string;
            /**
             * @description User status
             * @example active
             * @enum {string}
             */
            status: "active" | "inactive";
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    AuthController_signIn: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SignInRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description HTTP status code
                         * @example 200
                         */
                        statusCode: number;
                        /**
                         * @description Response message
                         * @example OK
                         */
                        message: string;
                        /** @description Response data */
                        data: components["schemas"]["SignInResponse"];
                        /**
                         * @description Error information (null on success)
                         * @example null
                         */
                        error?: null;
                        /** @description Error code (optional) */
                        errorCode?: string;
                    };
                };
            };
        };
    };
    AuthController_signUp: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SignUpRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description HTTP status code
                         * @example 200
                         */
                        statusCode: number;
                        /**
                         * @description Response message
                         * @example OK
                         */
                        message: string;
                        /** @description Response data */
                        data: components["schemas"]["SignInResponse"];
                        /**
                         * @description Error information (null on success)
                         * @example null
                         */
                        error?: null;
                        /** @description Error code (optional) */
                        errorCode?: string;
                    };
                };
            };
        };
    };
    AuthController_sendVerification: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SendVerificationRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description HTTP status code
                         * @example 200
                         */
                        statusCode: number;
                        /**
                         * @description Response message
                         * @example OK
                         */
                        message: string;
                        /** @description Response data */
                        data: components["schemas"]["VerificationCodeResponse"];
                        /**
                         * @description Error information (null on success)
                         * @example null
                         */
                        error?: null;
                        /** @description Error code (optional) */
                        errorCode?: string;
                    };
                };
            };
        };
    };
    AuthController_confirmVerification: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ConfirmVerificationRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description HTTP status code
                         * @example 200
                         */
                        statusCode: number;
                        /**
                         * @description Response message
                         * @example OK
                         */
                        message: string;
                        /** @description Response data */
                        data: components["schemas"]["ConfirmVerificationResponse"];
                        /**
                         * @description Error information (null on success)
                         * @example null
                         */
                        error?: null;
                        /** @description Error code (optional) */
                        errorCode?: string;
                    };
                };
            };
        };
    };
    AuthController_refreshNewToken: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RefreshTokenRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description HTTP status code
                         * @example 200
                         */
                        statusCode: number;
                        /**
                         * @description Response message
                         * @example OK
                         */
                        message: string;
                        /** @description Response data */
                        data: components["schemas"]["SignInResponse"];
                        /**
                         * @description Error information (null on success)
                         * @example null
                         */
                        error?: null;
                        /** @description Error code (optional) */
                        errorCode?: string;
                    };
                };
            };
        };
    };
    AuthController_resetPassword: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ResetPasswordRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description HTTP status code
                         * @example 200
                         */
                        statusCode: number;
                        /**
                         * @description Response message
                         * @example OK
                         */
                        message: string;
                        /**
                         * @description No data returned
                         * @example null
                         */
                        data: null;
                        /**
                         * @description Error information (null on success)
                         * @example null
                         */
                        error?: null;
                        /** @description Error code (optional) */
                        errorCode?: string;
                    };
                };
            };
        };
    };
    UserController_updateStatus: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateStatusRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description HTTP status code
                         * @example 200
                         */
                        statusCode: number;
                        /**
                         * @description Response message
                         * @example OK
                         */
                        message: string;
                        /**
                         * @description No data returned
                         * @example null
                         */
                        data: null;
                        /**
                         * @description Error information (null on success)
                         * @example null
                         */
                        error?: null;
                        /** @description Error code (optional) */
                        errorCode?: string;
                    };
                };
            };
        };
    };
}
